package com.concepts.arrays;

// BINARY SEARCH

/*
 * Binary search is a search algorithm used to find the position of a target value within a SORTED ARRAY.
 * 		Implementation behind binary search:
 * 			>> Divide the search space into two halves by finding the middle index “mid”. 
			>> Compare the middle element of the search space with the key. 
			>> If the key is found at middle element, the process is terminated.
			>> If the key is not found at middle element, choose which half will be used as the next search space.
				>> If the key is smaller than the middle element, then the left side is used for next search.
				>> If the key is larger than the middle element, then the right side is used for next search.
			>> This process is continued until the key is found or the total search space is exhausted.
 * 		
 */

// ITERATIVE vs RECURSIVE
class BinarySearchIterative{
	// Method to return index of x if it is present
	int binarySearch(int arr[], int x) {
		
		int low =0, high=arr.length-1;
		while(low<=high) {
			// Finding mid value
			int mid = low + (high - low) / 2;
			// Check if mid== value
			 if(arr[mid] == x) 		
				 return mid;
			 // If mid less than the value
			 if (arr[mid]< x)
				 low = mid +1;
			 // If mid greater than the value
			 else
				 high = mid - 1;
		}
		// If the value isn't present
		return -1;
	}
}

public class BinarySearch {
	public static void main(String[] args) {
		
	}
}
